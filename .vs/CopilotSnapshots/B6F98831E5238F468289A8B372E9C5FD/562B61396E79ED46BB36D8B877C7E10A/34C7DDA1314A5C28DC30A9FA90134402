<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Cyprus Brainrot Game</title>
    <style>
        /* merged body rules to avoid duplicate declarations */
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-image: url('images/background.png');
            background-color: #000;
            color: rgb(255, 255, 255);
            padding-left: 20px;
        }

        .guide {
            color: black;
        }
        #coins-display {
            font-size: 30px;
            margin: 20px;
            color: white;
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 10;
        }

        .skin-card {
            display: inline-block;
            background-color: #f4f4f4;
            border: 2px solid #ccc;
            padding: 10px;
            margin: 10px;
            text-align: center;
            border-radius: 12px;
            width: 180px;
        }

        .skin-img {
            width: 100%;
            border-radius: 8px;
        }

        .map-buttons-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            padding: 10px;
        }

        .map-button {
            padding: 10px 20px;
            background-color: #ffcc00;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .map-button:hover {
            transform: scale(1.1);
        }

        .menu {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 12px;
            z-index: 10;
        }

        .btn {
            background-color: #444;
            color: #fff;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
        }

        .btn:hover {
            background-color: #666;
        }

        #gameCanvas {
            width: 100vw;
            height: 100vh;
            display: block;
        }

#joystick-container {
  position: fixed;
  bottom: 30px;
  left: 30px;
  z-index: 9999;
}

#joystick-base {
  width: 120px;
  height: 120px;
  background: rgba(0, 0, 0, 0.3);
  border-radius: 50%;
  position: relative;
  touch-action: none;
}
    @keyframes zoom {
  0% { transform: scale(1); }
  100% { transform: scale(1.2); }
}
.confetti {
  position: absolute;
  width: 10px;
  height: 10px;
  background-color: #f00;
  opacity: 0.7;
}
#joystick-stick {
  width: 60px;
  height: 60px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 50%;
  position: absolute;
  left: 30px;
  top: 30px;
  touch-action: none;
}

    </style>
</head>
<body>
    <div id="html-part">
    <div class="guide">    
        <br><br><br><br><br><br><br><br><br>
    <p> Welcome to Cyprus Brainrot Game! 
        <br> Use the white joystick to move your character and red joystic to shoot at the Enemy. 
        <br> Collect coins and unlock skins in the Bazaar! [Not yet available]
        <br> Click "battle!" to start a game.
        <br> Use the joystick on mobile or tablet devices.
        <br> Use arrow keys or WASD to move on desktop and mouse click to shoot.
        <br> Enjoy the game and have fun!
    </p>
    </div>
    <div id="lootbox-popup" style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%,-50%); background:linear-gradient(135deg,#FFD700,#FFAA00); padding:30px; border-radius:20px; border:5px solid white; z-index:1000; text-align:center; box-shadow:0 0 30px rgba(255,215,0,0.7);">
  <h2 style="color:#FFF; text-shadow:2px 2px 4px #000;">LOOT BOX REWARD!</h2>
  <div id="lootbox-content" style="font-size:24px; margin:20px 0;"></div>
  <button id="lootbox-ok" style="background:#FFF; border:none; padding:10px 20px; border-radius:10px; font-weight:bold;">OK</button>
</div>
    <div id="coins-display"></div>
    <div id="skins-container"></div>
    <div id="map-selection" class="map-buttons-container"></div>

    <div class="menu">
        <button class="btn" onclick="startGame()">🎮 battle!</button>
        <button class="btn" onclick="openShop()">🛒 Bazaar</button>
        <button class="btn" onclick="showRankings()">🏆 Glory Line</button>
        <button class="btn" id="switch-player-btn" onclick="switchPlayer()">🔁 Switch Player</button>
    </div> 

    <div id="rankings-container" style="display:none; position:absolute; top:60px; left:50%; transform:translateX(-50%); background:#222; color:#fff; padding:24px 32px; border-radius:16px; z-index:20; min-width:320px; text-align:center;">
        <h2>🏆 Glory Line</h2>
        <div id="owned-players" style="text-align:left; margin-bottom:12px;"></div>
        <ol id="ladder-list" style="text-align:left; margin:0 auto; max-width:300px;"></ol>
        <div id="rank-prize-message" style="margin-top:10px; color:#ffcc00;"></div>
        <button class="btn" onclick="closeRankings()" style="margin-top:16px;">Close</button>
    </div>
    <canvas id="gameCanvas"></canvas>

  <!-- HTML μέρος (βάζεις αυτό στο body σου) -->
<div id="joystick-container" style="display: none;">
  <div id="joystick-base">
    <div id="joystick-stick"></div>
  </div>
</div>

<!-- Add to your HTML -->
<div id="shoot-joystick-container" style="display: none; position: fixed; bottom: 30px; right: 30px; z-index: 9999;">
  <div id="shoot-joystick-base" style="width: 120px; height: 120px; background: rgba(0, 0, 0, 0.3); border-radius: 50%; position: relative; touch-action: none;">
    <div id="shoot-joystick-stick" style="width: 60px; height: 60px; background: rgba(255, 100, 100, 0.8); border-radius: 50%; position: absolute; left: 30px; top: 30px; touch-action: none;"></div>
  </div>
</div>
    </div>

    <script>
        // --- CANVAS INIT AT TOP ---
        const gameCanvas = document.getElementById('gameCanvas');
        const ctx = gameCanvas.getContext('2d');
        gameCanvas.width = window.innerWidth;
        gameCanvas.height = window.innerHeight;

        let playerCoins = parseInt(localStorage.getItem('coins')) || 1000;
        let unlockedSkins = JSON.parse(localStorage.getItem('unlockedSkins')) || [];
        // unlockedPlayers manages purchasable player characters
        let unlockedPlayers = JSON.parse(localStorage.getItem('unlockedPlayers')) || ['default'];
        let selectedPlayerId = localStorage.getItem('selectedPlayerId') || 'default';

        // Player character definitions
        const playersData = {
            default: {
                id: 'default',
                name: 'Scorpios',
                img: 'images/ScorpiosSouvlak.png',
                hp: 13,
                speed: 4, // slower base player
                laserDamage: 1,
                size: 55
            },
            speedster: {
                id: 'speedster',
                name: 'Speedster',
                img: 'images/ScorpiosSouvlak.png', // replace with actual image if available
                hp: 16,
                speed: 9, // faster
                laserDamage: 2, // lasers do 2 hp
                size: 55
            }
        };

        // load selected player's image
        const playerImg = new Image();
        playerImg.src = playersData[selectedPlayerId].img;
        const AIImg = new Image();
        AIImg.src = 'images/pkiotisfournos.png';
        let gameStarted = false;
        let lasers = [];
        let aiLasers = [];

        // Persistence helper
        function saveState() {
            localStorage.setItem('coins', playerCoins);
            localStorage.setItem('unlockedSkins', JSON.stringify(unlockedSkins));
            localStorage.setItem('unlockedPlayers', JSON.stringify(unlockedPlayers));
            localStorage.setItem('playerLevel', playerLevel);
            localStorage.setItem('selectedPlayerId', selectedPlayerId);
        }

        // Lootbox: returns reward object
        function openLootBox() {
            const roll = Math.random() * 100;
            if (roll < 30) return { type: 'nothing', message: 'Better luck next time! 🍀' };
            if (roll < 80) return { type: 'levels', amount: 2, message: '🔥 +2 Levels! 🔥' };
            if (roll < 81) return { type: 'rank', message: '✨ RANK UP! ✨' };
            if (roll < 90) return { type: 'coins', amount: 100, message: '💰 +100 Coins! 💰' };
            if (roll < 95) return { type: 'coins', amount: 200, message: '💰 +200 Coins! 💰' };
            return { type: 'coins', amount: 500, message: '💰 +500 Coins! 💰' };
        }

        // Show lootbox popup and apply reward display
        function showLootBoxResults(reward) {
            const popup = document.getElementById('lootbox-popup');
            const content = document.getElementById('lootbox-content');
            const okBtn = document.getElementById('lootbox-ok');
            if (!popup || !content) return;

            if (reward.type === 'rank') {
                content.innerHTML = `\n      <div style="animation:zoom 0.5s infinite alternate;">\n        ✨✨✨ ${reward.message} ✨✨✨\n      </div>\n      <div>New rank: ${getCurrentRank(playerLevel).name}</div>\n    `;
                popup.style.background = 'linear-gradient(135deg,#8A2BE2,#9370DB)';
            } else {
                content.textContent = reward.message || 'You got something!';
                popup.style.background = 'linear-gradient(135deg,#FFD700,#FFAA00)';
            }

            okBtn.onclick = () => { popup.style.display = 'none'; };
            popup.style.display = 'block';
        }

        // player object will be initialized from selected player data
        let player = {
            x: gameCanvas.width / 2,
            y: gameCanvas.height / 2,
            size: playersData[selectedPlayerId].size,
            color: 'blue',
            speed: playersData[selectedPlayerId].speed,
            hp: playersData[selectedPlayerId].hp,
            shootCooldown: 3
        };

        let ai = {
            x: gameCanvas.width / 4,
            y: gameCanvas.height / 4,
            size: 50,
            color: 'green',
            speed: 5,
            hp: 5,
            shootCooldown: 2,
            vx: 1.5,
            vy: 1.5
        };

        let playerLevel = parseInt(localStorage.getItem('playerLevel')) || 1;

        // remove drawMap placeholder if present
        let drawMap = function() {};

        const obstacles = [
            { x: 100, y: 100, width: 50, height: 30, type: 'lake' },
            { x: 700, y: 200, width: 40, height: 60, type: 'lake' },
            { x: 400, y: 500, width: 60, height: 40, type: 'lake' },
            { x: 250, y: 350, width: 30, height: 60, type: 'brick' }
        ];

        function clearCanvas() { ctx.clearRect(0, 0, gameCanvas.width, gameCanvas.height); }

        function showCoins() {
            const rank = getCurrentRank(playerLevel);
            const display = document.getElementById('coins-display');
            display.innerText = `💰 Coins: ${playerCoins}  |  🏅 Rank: ${rank.name}  |  🔼 Level: ${playerLevel}`;
            display.style.display = 'block';
        }

        async function loadSkins() {
            try {
                const res = await fetch('skins.json');
                const skins = await res.json();
                const container = document.getElementById('skins-container');
                container.innerHTML = '';
                skins.forEach((skin) => {
                    const div = document.createElement('div');
                    div.className = 'skin-card';
                    div.innerHTML = `\n                <img src="${skin.image}" class="skin-img">\n                <h3>${skin.name}</h3>\n                <p>${skin.character}</p>\n                <button ${unlockedSkins.includes(skin.id) || skin.price === 0 ? '' : 'onclick="buySkin(\\'${skin.id}\\',${skin.price})"'}>\n                    ${unlockedSkins.includes(skin.id) || skin.price === 0 ? '✔️ Owned' : `Buy for ${skin.price} coins`}\n                </button>\n            `;
                    container.appendChild(div);
                });

                // Add player purchase card for Speedster in Bazaar UI
                const playerDiv = document.createElement('div');
                playerDiv.className = 'skin-card';
                const owned = unlockedPlayers.includes('speedster');
                playerDiv.innerHTML = `\n                    <img src="${playersData.speedster.img}" class="skin-img">\n                    <h3>${playersData.speedster.name}</h3>\n                    <p>Faster character. Laser deals ${playersData.speedster.laserDamage} HP. HP ${playersData.speedster.hp}.</p>\n                    <button ${owned ? '' : 'onclick="buyPlayer(\'speedster\',1500)"'}>\n                        ${owned ? '✔️ Owned' : 'Buy Speedster for 1500 coins'}\n                    </button>\n                `;
                container.appendChild(playerDiv);

            } catch (e) {
                // ignore missing skins.json
            }
        }

        function buySkin(id, price) {
            if (playerCoins >= price) {
                playerCoins -= price;
                unlockedSkins.push(id);
                saveState();
                showCoins();
                loadSkins();
                alert('Skin unlocked!');
            } else {
                alert('Not enough coins 😢');
            }
        }

        function buyPlayer(id, price) {
            if (unlockedPlayers.includes(id)) return;
            if (playerCoins >= price) {
                playerCoins -= price;
                unlockedPlayers.push(id);
                saveState();
                showCoins();
                loadSkins();
                alert('Player unlocked! Use Switch Player to equip.');
            } else {
                alert('Not enough coins 😢');
            }
        }

        async function loadMaps() {
            try {
                const res = await fetch('images/maps.json');
                const maps = await res.json();
                const mapContainer = document.getElementById('map-selection');
                mapContainer.innerHTML = '';
                maps.forEach((map) => {
                    const btn = document.createElement('button');
                    btn.className = 'map-button';
                    btn.innerText = map.name;
                    btn.onclick = () => selectMap(map);
                    mapContainer.appendChild(btn);
                });
            } catch (e) {
                // ignore
            }
        }

        function selectMap(map) { console.log(`Selected map: ${map.name}`); }

        function updatePlayerFromSelection() {
            const data = playersData[selectedPlayerId] || playersData.default;
            player.size = data.size;
            player.speed = data.speed;
            player.hp = data.hp;
            playerImg.src = data.img;
            saveState();
        }

        function drawPlayer() {
            if (playerImg.complete && playerImg.naturalWidth !== 0) {
                ctx.drawImage(playerImg, player.x, player.y, player.size, player.size);
            } else {
                ctx.fillStyle = player.color;
                ctx.fillRect(player.x, player.y, player.size, player.size);
            }
        }

        function drawAI() {
            if (AIImg.complete && AIImg.naturalWidth !== 0) {
                ctx.drawImage(AIImg, ai.x, ai.y, ai.size, ai.size);
            } else {
                ctx.fillStyle = ai.color;
                ctx.fillRect(ai.x, ai.y, ai.size, ai.size);
            }
        }

        function drawHP() {
            if (!gameStarted) return;
            ctx.save();
            ctx.fillStyle = 'white';
            ctx.font = '20px Arial';
            ctx.fillText(`Your HP: ${player.hp}`, 10, 25);
            ctx.fillText(`Enemy HP: ${ai.hp}`, 10, 90);
            ctx.restore();
        }

        function updateAI() {
            let oldX = ai.x, oldY = ai.y;
            ai.x += ai.vx; ai.y += ai.vy;
            if (ai.x < 0 || ai.x + ai.size > gameCanvas.width) ai.vx *= -1;
            if (ai.y < 0 || ai.y + ai.size > gameCanvas.height) ai.vy *= -1;
            for (let obs of obstacles) {
                if (checkCollisionWithRect(ai, obs)) { ai.x = oldX; ai.y = oldY; ai.vx = (Math.random()-0.5)*3; ai.vy = (Math.random()-0.5)*3; break; }
            }
            const shootRange = 250;
            const dx = (player.x + player.size/2) - (ai.x + ai.size/2);
            const dy = (player.y + player.size/2) - (ai.y + ai.size/2);
            const dist = Math.sqrt(dx*dx + dy*dy);
            if (ai.shootCooldown <= 0) {
                let vx, vy;
                if (dist <= shootRange) { const len = Math.sqrt(dx*dx + dy*dy); vx = dx/len*12; vy = dy/len*12; }
                else { let angle = Math.random()*2*Math.PI; vx = Math.cos(angle)*12; vy = Math.sin(angle)*12; }
                aiLasers.push({ x: ai.x + ai.size/2, y: ai.y + ai.size/2, vx, vy, life: 60, damage: 1 });
                ai.shootCooldown = 60 + Math.floor(Math.random()*120);
            } else ai.shootCooldown--;
        }

        gameCanvas.addEventListener('mousedown', function(e) {
            if (!gameStarted || player.shootCooldown > 0) return;
            const rect = gameCanvas.getBoundingClientRect();
            const mouseX = e.clientX - rect.left;
            const mouseY = e.clientY - rect.top;
            const startX = player.x + player.size/2;
            const startY = player.y + player.size/2;
            const dx = mouseX - startX; const dy = mouseY - startY; const len = Math.sqrt(dx*dx + dy*dy) || 1;
            const speed = 12;
            const vx = dx/len*speed; const vy = dy/len*speed;
            const damage = playersData[selectedPlayerId].laserDamage || 1;
            lasers.push({ x: startX, y: startY, vx, vy, life: 60, damage });
            player.shootCooldown = 60;
        });

        function drawLasers() { ctx.save(); ctx.strokeStyle='#00ffff'; ctx.lineWidth=4; lasers.forEach(l=>{ ctx.beginPath(); ctx.moveTo(l.x,l.y); ctx.lineTo(l.x - l.vx*2, l.y - l.vy*2); ctx.stroke(); }); ctx.restore(); }

        function updateLasers() {
            for (let i = lasers.length - 1; i >= 0; i--) {
                lasers[i].x += lasers[i].vx; lasers[i].y += lasers[i].vy; lasers[i].life--;
                let hitObstacle = false;
                for (let obs of obstacles) {
                    if (checkCollisionWithRect({ x: lasers[i].x, y: lasers[i].y, size: 4 }, obs)) { hitObstacle = true; break; }
                }
                if (hitObstacle) { lasers.splice(i,1); continue; }
                if (checkCollision(lasers[i], ai)) {
                    ai.hp -= (lasers[i].damage || 1);
                    lasers.splice(i,1);
                    if (ai.hp <= 0) {
                        // Player wins: reward and automatic lootbox
                        playerCoins += 100;
                        playerLevel += 1;
                        const reward = openLootBox();
                        if (reward.type === 'coins') playerCoins += reward.amount || 0;
                        else if (reward.type === 'levels') playerLevel += reward.amount || 0;
                        else if (reward.type === 'rank') playerLevel += 1;

                        saveState();
                        showCoins();

                        // show lootbox popup
                        showLootBoxResults(reward);

                        // end game after short delay so popup visible
                        setTimeout(() => endGame(), 500);
                        return;
                    }
                    continue;
                }
                if (lasers[i].x < 0 || lasers[i].x > gameCanvas.width || lasers[i].y < 0 || lasers[i].y > gameCanvas.height || lasers[i].life <= 0 || getDistance(lasers[i].x, lasers[i].y, player.x + player.size/2, player.y + player.size/2) > 300) {
                    lasers.splice(i,1);
                }
            }
        }

        function drawAILasers() { ctx.save(); ctx.strokeStyle='#ff4444'; ctx.lineWidth=4; aiLasers.forEach(l=>{ ctx.beginPath(); ctx.moveTo(l.x,l.y); ctx.lineTo(l.x - l.vx*2, l.y - l.vy*2); ctx.stroke(); }); ctx.restore(); }

        function updateAILasers() {
            for (let i = aiLasers.length - 1; i >= 0; i--) {
                aiLasers[i].x += aiLasers[i].vx; aiLasers[i].y += aiLasers[i].vy; aiLasers[i].life--;
                let hitObstacle = false;
                for (let obs of obstacles) {
                    if (checkCollisionWithRect({ x: aiLasers[i].x, y: aiLasers[i].y, size: 4 }, obs)) { hitObstacle = true; break; }
                }
                if (hitObstacle) { aiLasers.splice(i,1); continue; }
                if (checkCollision(aiLasers[i], player)) {
                    player.hp -= (aiLasers[i].damage || 1);
                    aiLasers.splice(i,1);
                    if (player.hp <= 0) { alert('Game Over! You Lose!'); endGame(); }
                    continue;
                }
                if (aiLasers[i].x < 0 || aiLasers[i].x > gameCanvas.width || aiLasers[i].y < 0 || aiLasers[i].y > gameCanvas.height || aiLasers[i].life <= 0 || getDistance(aiLasers[i].x, aiLasers[i].y, ai.x + ai.size/2, ai.y + ai.size/2) > 300) { aiLasers.splice(i,1); }
            }
        }

        function getDistance(x1,y1,x2,y2){ return Math.sqrt(Math.pow(x2-x1,2)+Math.pow(y2-y1,2)); }
        function checkCollision(laser,target){ return laser.x >= target.x && laser.x <= target.x + target.size && laser.y >= target.y && laser.y <= target.y + target.size; }
        function checkCollisionWithRect(rect1,rect2){ return rect1.x < rect2.x + rect2.width && rect1.x + (rect1.size||0) > rect2.x && rect1.y < rect2.y + rect2.height && rect1.y + (rect1.size||0) > rect2.y; }

        function drawObstacles(){ ctx.save(); for(let obs of obstacles){ ctx.fillStyle = obs.type==='lake' ? '#0077aa' : '#8B0000'; ctx.fillRect(obs.x, obs.y, obs.width, obs.height); } ctx.restore(); }

        function updateCooldowns(){ if(player.shootCooldown>0) player.shootCooldown--; if(ai.shootCooldown>0) ai.shootCooldown--; }

        function gameLoop(){ clearCanvas(); if(gameStarted){ drawObstacles(); drawPlayer(); drawAI(); drawHP(); updateAI(); updateCooldowns(); updateLasers(); drawLasers(); updateAILasers(); drawAILasers(); } requestAnimationFrame(gameLoop); }

        function startGame(){ document.getElementById('coins-display').style.display='block'; document.getElementById('skins-container').style.display='none'; document.getElementById('map-selection').style.display='none'; document.querySelector('.menu').style.display='none'; document.querySelector('.guide').style.display='none'; document.getElementById('rankings-container').style.display='none';
            // reset according to selected player
            updatePlayerFromSelection();
            player.hp = playersData[selectedPlayerId].hp;
            ai.hp = 10;
            player.x=gameCanvas.width/2; player.y=gameCanvas.height/2; ai.x=gameCanvas.width/4; ai.y=gameCanvas.height/4; lasers=[]; aiLasers=[]; ai.shootCooldown=0; gameStarted=true; showCoins(); gameLoop(); }

        function endGame(){ gameStarted=false; document.getElementById('coins-display').style.display='block'; document.querySelector('.menu').style.display='flex'; document.querySelector('.guide').style.display='block'; showCoins(); player.hp=playersData[selectedPlayerId].hp; ai.hp=10; player.x=gameCanvas.width/2; player.y=gameCanvas.height/2; ai.x=gameCanvas.width/4; ai.y=gameCanvas.height/4; lasers=[]; aiLasers=[]; ai.shootCooldown=0; }

        function openShop(){ // open skins container to act as Bazaar
            document.getElementById('skins-container').style.display = 'block';
            loadSkins();
        }

        const ladderRanks = [ { name:'Bronze', min:1, prize:0 }, { name:'Silver', min:3, prize:200 }, { name:'Gold', min:6, prize:500 }, { name:'Platinum', min:10, prize:1000 }, { name:'Diamond', min:15, prize:2000 } ];
        function getCurrentRank(level){ let current=ladderRanks[0]; for(let i=0;i<ladderRanks.length;i++){ if(level>=ladderRanks[i].min) current=ladderRanks[i]; } return current; }

        function showRankings(){ const container=document.getElementById('rankings-container'); const list=document.getElementById('ladder-list'); const prizeMsg=document.getElementById('rank-prize-message'); const ownedDiv = document.getElementById('owned-players'); list.innerHTML=''; prizeMsg.innerText=''; ownedDiv.innerHTML='';
            // show owned players
            ownedDiv.innerHTML = '<strong>Owned Players:</strong> ' + unlockedPlayers.map(id => playersData[id]?.name || id).join(', ');
            let lastRank=localStorage.getItem('lastRank')||ladderRanks[0].name; let currentRank=getCurrentRank(playerLevel); ladderRanks.forEach(rank=>{ const li=document.createElement('li'); li.innerHTML=`${rank.name} (Level ${rank.min})`; if(currentRank.name===rank.name){ li.style.color='#ffcc00'; li.style.fontWeight='bold'; li.innerHTML += ' ← You are here!'; } list.appendChild(li); }); if(currentRank.name !== lastRank){ if(currentRank.prize>0){ playerCoins += currentRank.prize; saveState(); showCoins(); prizeMsg.innerText = `Congratulations! You reached ${currentRank.name} rank and won ${currentRank.prize} coins!`; } else { prizeMsg.innerText = `You reached ${currentRank.name} rank!`; } localStorage.setItem('lastRank', currentRank.name); } container.style.display='block'; }
        function closeRankings(){ document.getElementById('rankings-container').style.display='none'; }

        window.addEventListener('keydown',(e)=>{ let oldX=player.x, oldY=player.y; switch(e.key){ case 'ArrowUp': case 'w': case 'W': player.y -= player.speed; break; case 'ArrowDown': case 's': case 'S': player.y += player.speed; break; case 'ArrowLeft': case 'a': case 'A': player.x -= player.speed; break; case 'ArrowRight': case 'd': case 'D': player.x += player.speed; break; case '1': // debug: give coins
                    playerCoins += 500; saveState(); showCoins(); break; } for(let obs of obstacles){ if(checkCollisionWithRect(player, obs)){ player.x = oldX; player.y = oldY; break; } } });

        window.onload = ()=>{ // ensure UI sync
            updatePlayerFromSelection();
            showCoins(); loadSkins(); loadMaps();
        };

        // Mobile joysticks (kept active) - unified speed with keyboard
        function isMobileOrTablet(){ return /Mobi|Android|iPhone|iPad|iPod/i.test(navigator.userAgent); }
        document.getElementById('joystick-container').style.display = 'block';
        const base = document.getElementById('joystick-base'); const stick = document.getElementById('joystick-stick'); let dragging=false, centerX, centerY, movement={x:0,y:0};
        function updateStickPosition(x,y){ const dx = x-centerX, dy = y-centerY; const distance = Math.min(Math.sqrt(dx*dx+dy*dy),40); const angle = Math.atan2(dy,dx); const newX = Math.cos(angle)*distance; const newY = Math.sin(angle)*distance; stick.style.left = `${30+newX}px`; stick.style.top = `${30+newY}px`; movement = { x: newX/40, y: newY/40 }; }
        function resetStick(){ stick.style.left = '30px'; stick.style.top = '30px'; movement = {x:0,y:0}; }
        base.addEventListener('touchstart',(e)=>{ dragging=true; const rect = base.getBoundingClientRect(); centerX = rect.left + rect.width/2; centerY = rect.top + rect.height/2; });
        base.addEventListener('touchmove',(e)=>{ if(dragging){ e.preventDefault(); updateStickPosition(e.touches[0].clientX, e.touches[0].clientY); } });
        base.addEventListener('touchend',()=>{ dragging=false; resetStick(); });
        setInterval(()=>{ if(movement.x !== 0 || movement.y !== 0) movePlayer(movement.x, movement.y); },16);
        function movePlayer(x,y){ let oldX=player.x, oldY=player.y; // movement values normalized (-1..1)
            player.x += x * player.speed; player.y += y * player.speed; for(let obs of obstacles){ if(checkCollisionWithRect(player, obs)){ player.x = oldX; player.y = oldY; break; } } }

        // shoot joystick
        document.getElementById('shoot-joystick-container').style.display = 'block';
        const shootBase = document.getElementById('shoot-joystick-base'); const shootStick = document.getElementById('shoot-joystick-stick'); let shootDragging=false, shootCenterX, shootCenterY, shootDirection={x:0,y:0}, lastShootTime=0; const shootCooldown = 500;
        function updateShootStickPosition(x,y){ const dx=x-shootCenterX, dy=y-shootCenterY; const distance = Math.min(Math.sqrt(dx*dx+dy*dy),40); const angle = Math.atan2(dy,dx); const newX = Math.cos(angle)*distance; const newY = Math.sin(angle)*distance; shootStick.style.left = `${30+newX}px`; shootStick.style.top = `${30+newY}px`; shootDirection = { x: newX/40, y: newY/40 }; const now = Date.now(); if(distance>10 && now - lastShootTime > shootCooldown && player.shootCooldown <= 0){ shoot(); lastShootTime = now; } }
        function resetShootStick(){ shootStick.style.left = '30px'; shootStick.style.top = '30px'; shootDirection = {x:0,y:0}; }
        function shoot(){ if(!gameStarted || player.shootCooldown > 0) return; const speed = 12; const damage = playersData[selectedPlayerId].laserDamage || 1; lasers.push({ x: player.x + player.size/2, y: player.y + player.size/2, vx: shootDirection.x*speed, vy: shootDirection.y*speed, life: 60, damage }); player.shootCooldown = 20; }
        shootBase.addEventListener('touchstart',(e)=>{ shootDragging=true; const rect = shootBase.getBoundingClientRect(); shootCenterX = rect.left + rect.width/2; shootCenterY = rect.top + rect.height/2; });
        shootBase.addEventListener('touchmove',(e)=>{ if(shootDragging){ e.preventDefault(); updateShootStickPosition(e.touches[0].clientX, e.touches[0].clientY); } });
        shootBase.addEventListener('touchend',()=>{ shootDragging=false; resetShootStick(); });

        // Switch player function bound to switch button
        function switchPlayer(){
            // toggle between default and speedster if owned
            if (selectedPlayerId === 'default' && unlockedPlayers.includes('speedster')) {
                selectedPlayerId = 'speedster';
            } else {
                selectedPlayerId = 'default';
            }
            updatePlayerFromSelection();
            alert('Switched to ' + playersData[selectedPlayerId].name);
        }

    </script>
</body>
</html>